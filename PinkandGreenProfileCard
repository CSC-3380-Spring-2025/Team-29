// Enhanced ProfileCard.jsx with visual improvements and garden theme
import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

const ProfileCard = () => {
  const [username, setUsername] = useState("Username");
  const [bio, setBio] = useState("Tell us about yourself");
  const [email, setEmail] = useState("your@email.com");
  const [location, setLocation] = useState("City, Country");
  const [interests, setInterests] = useState("etc. Coding, Gaming");
  const [language, setLanguage] = useState("English");
  const [nickname, setNickname] = useState("Choose a funky nickname");
  const [pfp, setPfp] = useState(null);
  const [editing, setEditing] = useState(false);
  const [showCard, setShowCard] = useState(true);

  const [tempUsername, setTempUsername] = useState(username);
  const [tempBio, setTempBio] = useState(bio);
  const [tempEmail, setTempEmail] = useState(email);
  const [tempLocation, setTempLocation] = useState(location);
  const [tempInterests, setTempInterests] = useState(interests);
  const [tempLanguage, setTempLanguage] = useState(language);
  const [tempNickname, setTempNickname] = useState(nickname);

  const isUsernameValid = /^[^\s]{4,17}$/.test(tempUsername);

  const handleSave = () => {
    if (!isUsernameValid) return;
    setUsername(tempUsername);
    setBio(tempBio);
    setEmail(tempEmail);
    setLocation(tempLocation);
    setInterests(tempInterests);
    setLanguage(tempLanguage);
    setNickname(tempNickname);
    setEditing(false);
    setShowCard(false);
  };

  const handleCancel = () => {
    setTempUsername(username);
    setTempBio(bio);
    setTempEmail(email);
    setTempLocation(location);
    setTempInterests(interests);
    setTempLanguage(language);
    setTempNickname(nickname);
    setEditing(false);
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file && (file.type === "image/png" || file.type === "image/jpeg")) {
      setPfp(URL.createObjectURL(file));
    }
  };

  return (
    <AnimatePresence>
      {showCard && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.3 }}
          className="max-w-2xl mx-auto bg-gradient-to-br from-pink-100 via-white to-green-100 shadow-xl rounded-3xl p-10 space-y-6 border border-green-200"
        >
          {/* Profile Icon */}
          <div className="flex flex-col items-center">
            {pfp ? (
              <img
                src={pfp}
                alt="Profile"
                className="w-28 h-28 rounded-full object-cover border-4 border-pink-400 shadow-md"
              />
            ) : (
              <div className="w-28 h-28 rounded-full bg-white border-4 border-pink-400 flex items-center justify-center text-3xl font-bold text-pink-600 shadow-md">
                ?
              </div>
            )}

            {editing && (
              <input
                type="file"
                accept=".png,.jpeg,.jpg"
                onChange={handleFileChange}
                className="mt-2 text-sm"
              />
            )}

            {editing ? (
              <input
                type="text"
                value={tempUsername}
                onChange={(e) => setTempUsername(e.target.value)}
                className="mt-4 w-full text-center text-2xl font-semibold p-2 border border-pink-300 rounded-md shadow-sm"
                placeholder="Username"
              />
            ) : (
              <h2 className="text-2xl font-bold mt-4 text-green-700">{username}</h2>
            )}

            {!editing && (
              <button
                onClick={() => setEditing(true)}
                className="mt-2 text-sm text-pink-600 hover:underline"
              >
                Edit Profile
              </button>
            )}
          </div>

          {/* Additional Info Sections */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {[{
              label: "Bio",
              value: bio,
              temp: tempBio,
              setTemp: setTempBio,
              type: "textarea"
            }, {
              label: "Email",
              value: email,
              temp: tempEmail,
              setTemp: setTempEmail
            }, {
              label: "Location",
              value: location,
              temp: tempLocation,
              setTemp: setTempLocation
            }, {
              label: "Interests",
              value: interests,
              temp: tempInterests,
              setTemp: setTempInterests
            }, {
              label: "Language",
              value: language,
              temp: tempLanguage,
              setTemp: setTempLanguage
            }, {
              label: "Nickname",
              value: nickname,
              temp: tempNickname,
              setTemp: setTempNickname
            }].map(({ label, value, temp, setTemp, type }) => (
              <div key={label} className="bg-white rounded-lg p-3 shadow-sm">
                <h3 className="font-semibold text-green-800 mb-1">{label}:</h3>
                {editing ? (
                  type === "textarea" ? (
                    <textarea
                      className="w-full p-2 border-2 border-green-400 bg-white rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-pink-300"
                      value={temp}
                      onChange={(e) => setTemp(e.target.value)}
                    />
                  ) : (
                    <input
                      className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      value={temp}
                      onChange={(e) => setTemp(e.target.value)}
                    />
                  )
                ) : (
                  <p className="text-gray-600 text-sm bg-pink-50 px-2 py-1 rounded shadow-inner">{value}</p>
                )}
              </div>
            ))}
          </div>

          {editing && (
            <div className="flex justify-end space-x-2 pt-4">
              {!isUsernameValid && (
                <p className="text-red-500 text-xs absolute bottom-4 left-4">
                  Username must be 4â€“17 characters with no spaces.
                </p>
              )}
              <button
                onClick={handleCancel}
                className="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400 text-sm"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                disabled={!isUsernameValid}
                className={`px-4 py-2 rounded-md text-white text-sm ${
                  isUsernameValid ? "bg-green-500 hover:bg-green-600" : "bg-gray-300 cursor-not-allowed"
                }`}
              >
                Save & Close
              </button>
            </div>
          )}
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ProfileCard;
